/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.creativeidesign.timekeeper_v1.GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JDesktopPane;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import net.creativeidesign.timekeeper_v1.ToDoItemModel;
import net.creativeidesign.timekeeper_v1.db.DerbyDB;

/**
 *
 * @author Pi
 */
public class CategoryTableView extends javax.swing.JInternalFrame implements TaskOptions_interface{
    private int selectedID;
    private int selectedCategory = 0;
    private javax.swing.JPopupMenu tablePopupMenu;
    private JTable table;
    private String frameTitle;
    /**
     * Creates new form CategoryTableView
     */
    public CategoryTableView() {
        initComponents();
        myInitComponents();
    }
    
    public CategoryTableView(int selectedCategory) {
        initComponents();
        this.selectedCategory = selectedCategory;
        myInitComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScrollPanel = new javax.swing.JScrollPane();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Category view");
        setPreferredSize(new java.awt.Dimension(850, 640));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
     private void myInitComponents(){
        
        tablePopupMenu = new javax.swing.JPopupMenu();
        
        //create the table
        String[] columnTitles = { "id", "Category", "Title", "Description", "Finish Date", "Created", "Updated"};
        table = new JTable();
        DefaultTableModel titleTableModel = (DefaultTableModel) table.getModel();
        titleTableModel.setColumnIdentifiers(columnTitles);
        paintTable();
        table.setCellSelectionEnabled(true);
        
        //table.setAutoCreateRowSorter(true);
        ListSelectionModel cellSelectionModel = table.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
          public void valueChanged(ListSelectionEvent e) {
            int selectedData = 0;

            int[] selectedRow = table.getSelectedRows();
            int[] selectedColumns = table.getSelectedColumns();

            for (int i = 0; i < selectedRow.length; i++) {
              for (int j = 0; j < selectedColumns.length; j++) {
                //selectedData = (String) table.getValueAt(selectedRow[i], selectedColumns[j]);
                selectedData = (Integer) table.getValueAt(selectedRow[i], 0);
              }
            }
            
            selectedID = selectedData;
            
            //remove this before publish
            System.out.println("Selected: " + selectedData);
          }
        });
        tableScrollPanel.setViewportView(table);
        pack();
        
        /**
         * Right Click menu option
         */
        
        JMenuItem finishMenuItem = new JMenuItem("Finish Task");
        finishMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                markAsFinished();
            }   
        });
        tablePopupMenu.add(finishMenuItem);
        
        
        JMenuItem editMenuItem = new JMenuItem("Edit");
        editMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                openInternalFrame();
            }   
        });
        tablePopupMenu.add(editMenuItem);
        
        
        JMenuItem deleteMenuItem = new JMenuItem("Delete");
        deleteMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                deleteItem();
            }   
        });
        tablePopupMenu.add(deleteMenuItem);
        //set mouse listener
        table.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
              if (evt.isPopupTrigger()) {
                tablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
              }
            }

            public void mouseReleased(MouseEvent evt) {
              if (evt.isPopupTrigger()) {
                tablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
              }
            }
          });
        
   }
     private void paintTable(){
        DerbyDB db = new DerbyDB();
        int itemCount = db.getRowCount("items");
        
        
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
        tableModel.setRowCount(0);
        
        ArrayList<ToDoItemModel> currentItems = new ArrayList<>();
        
        //REFACTOR THIS [USE THE SAME CATEGORIESING METHOD AS IN COMPACT VIEW]
        switch(selectedCategory){
            case 1:
                setTitle("Important [SOON] - Category View");
                currentItems = db.readItemsInDB(selectedCategory, "cast({ fn timestampadd(sql_tsi_day, 8, current_date) } as date) >  finish_date");
                break;
            case 2:
                setTitle("Important [NOT SOON] - Category View");
                currentItems = db.readItemsInDB(1, "cast({ fn timestampadd(sql_tsi_day, 8, current_date) } as date) <  finish_date");
                break;
            case 3:
                setTitle("Not Important [SOON] - Category View");
                currentItems = db.readItemsInDB(2, "cast({ fn timestampadd(sql_tsi_day, 8, current_date) } as date) >  finish_date");
                break;
            case 4:
                setTitle("Not Important [NOT SOON] - Category View");
                currentItems = db.readItemsInDB(2, "cast({ fn timestampadd(sql_tsi_day, 8, current_date) } as date) <  finish_date");
                break;
            case 99:
                setTitle("Finished Tasks - Category View");
                currentItems = db.readItemsInDB(selectedCategory);
            break;
            default:
                currentItems = db.readItemsInDB();
                break;
        }
        
        db.closeConnection();
        
        for(ToDoItemModel item : currentItems){
                Object[] rowData = new Object[7]; 
                rowData[0] = item.getiId();
                String strCatName;
                switch(item.getiCategory()){
                    case 1:
                        strCatName = "Important";
                        break;
                    case 2:
                        strCatName = "Not Important";
                        break;
                    case 99:
                        strCatName = "Finished";
                        break;
                    default:
                        strCatName = "No Category";
                        break;
                }
            
                rowData[1] = strCatName;
                rowData[2] = item.getStrTitle();
                rowData[3] = item.getStrDescription();
                rowData[4] = item.getDtDateUntil();
                rowData[5] = item.getDtCreatedDate();
                rowData[6] = item.getDtUpdated();
                tableModel.addRow(rowData);
                //rowData[iCnt][5] = item.get;
        }
        table.setModel(tableModel);
        table.repaint();
        tableModel.fireTableDataChanged();
        
        
        //hide the id column
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        
     }
   
    @Override
   public void markAsFinished(){
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure to mark as done?", "Warning", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            ToDoItemModel currentItem;
            DerbyDB db = new DerbyDB();
            currentItem = db.findItemInDB(selectedID);
            currentItem.setiCategory(99);

            if(db.updateItemInDB(selectedID, currentItem)){
                JOptionPane.showMessageDialog (null, "Whoops something went wrong, please try again!", "Result message", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog (null, "Succesfully deleted!", "Result message", JOptionPane.INFORMATION_MESSAGE);
                paintTable();
            }
            db.closeConnection();
        }
   }  
     
    @Override
   public void openInternalFrame(){
        JDesktopPane desktopPane = this.getDesktopPane();
        AddEditItem addItem = new AddEditItem(selectedID);
        desktopPane.add(addItem);//add f1 to desktop pane
        addItem.setVisible(true);
        this.dispose();
   }
   
    @Override
    public void deleteItem(){
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure to delete?", "Warning", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            DerbyDB db = new DerbyDB();
            if(db.deleteItemInDB(selectedID, "items")){
                JOptionPane.showMessageDialog (null, "Whoops something went wrong, please try again!", "Result message", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog (null, "Succesfully deleted!", "Result message", JOptionPane.INFORMATION_MESSAGE);
                paintTable();
            }
        }
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane tableScrollPanel;
    // End of variables declaration//GEN-END:variables
}
