/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.creativeidesign.timekeeper_v1.GUI;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import net.creativeidesign.timekeeper_v1.ToDoItemModel;
import net.creativeidesign.timekeeper_v1.ToDoItemModelControl;
import net.creativeidesign.timekeeper_v1.UserModel;
import net.creativeidesign.timekeeper_v1.db.DerbyDB;
import net.creativeidesign.timekeeper_v1.util.BigDump;
import net.creativeidesign.timekeeper_v1.util.FrameLister;
import net.creativeidesign.timekeeper_v1.util.SyncData;
import net.creativeidesign.timekeeper_v1.util.TaskImport;

/**
 *
 * @author Pi
 */
public class MainDesktopPane extends javax.swing.JFrame implements TaskOptions_interface {
    private ToDoItemModelControl itemsListControl;
    private JTable titleTable;
    private JPopupMenu tablePopupMenu;
    private int selectedID;
    private UserModel currentUserModel;
    /**
     * Creates new form TimeKeeper_v1_GUI
     */
    public MainDesktopPane(UserModel um) {
        currentUserModel = um;
        initComponents();
        initMyComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addItemMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        syncMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        allTasksMenuBtn = new javax.swing.JMenuItem();
        importantMenuBtn = new javax.swing.JMenuItem();
        importantNotSoonMenuItem = new javax.swing.JMenuItem();
        notImpSoonMenuItem = new javax.swing.JMenuItem();
        notImpNotSoonMenuItem = new javax.swing.JMenuItem();
        finishedTaskMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        compactViewMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenuItem9.setText("jMenuItem9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time Keeper - desktop [v0.2]");

        desktopPane.setName(""); // NOI18N

        menuBar.setName(""); // NOI18N

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");

        addItemMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        addItemMenuItem.setText("Add Item");
        addItemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(addItemMenuItem);

        importMenuItem.setText("Import");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(importMenuItem);

        exportMenuItem.setText("Export");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exportMenuItem);

        syncMenuItem.setText("Syncronize");
        syncMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(syncMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        menuBar.add(jMenu1);

        jMenu2.setMnemonic('c');
        jMenu2.setText("Category");

        allTasksMenuBtn.setText("All Tasks");
        allTasksMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTasksMenuBtnActionPerformed(evt);
            }
        });
        jMenu2.add(allTasksMenuBtn);

        importantMenuBtn.setText("Important [Soon]");
        importantMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importantMenuBtnActionPerformed(evt);
            }
        });
        jMenu2.add(importantMenuBtn);

        importantNotSoonMenuItem.setText("Important [Not Soon]");
        importantNotSoonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importantNotSoonMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(importantNotSoonMenuItem);

        notImpSoonMenuItem.setText("Not Important [Soon]");
        notImpSoonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notImpSoonMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(notImpSoonMenuItem);

        notImpNotSoonMenuItem.setText("Not Important [Not Soon]");
        notImpNotSoonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notImpNotSoonMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(notImpNotSoonMenuItem);

        finishedTaskMenuItem.setText("Finished Tasks");
        finishedTaskMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedTaskMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(finishedTaskMenuItem);

        menuBar.add(jMenu2);

        jMenu3.setMnemonic('w');
        jMenu3.setText("Window");

        compactViewMenuItem.setText("Compact view");
        compactViewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compactViewMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(compactViewMenuItem);

        menuBar.add(jMenu3);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        settingsMenuItem.setMnemonic('c');
        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(settingsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1101, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
        );

        desktopPane.getAccessibleContext().setAccessibleName("mainDesktop");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initMyComponents(){
        addWindowListener(new FrameLister());
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainDesktopPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainDesktopPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainDesktopPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainDesktopPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //reset the pane colors
        /**This section was only for the welcome panel version available
        categoryDesktopPane.setBackground(new Color(76, 115, 150, 70));
        categoryItemsDesktopPane.setBackground(new Color(76, 115, 150, 70));
        itemDesktopPane.setBackground(new Color(76, 115, 150, 70));
        */
        
        //set up the table holding the taks
        tablePopupMenu = new JPopupMenu();
        DerbyDB db = new DerbyDB();
        itemsListControl = new ToDoItemModelControl(db.readItemsInDB());
        
        //create table
        String[] colHeaders = {"id", "Task Title"};
        titleTable = new JTable();
        
        
        DefaultTableModel titleTableModel = (DefaultTableModel) titleTable.getModel();
        titleTableModel.setColumnIdentifiers(colHeaders);
        
        titleTable.setTableHeader(null);
        //titleTable.setBackground(new Color(76, 115, 150, 70));
        //jScrollPane1.setBackground(new Color(76, 115, 150, 70));
        
        ListSelectionModel cellSelectionModel = titleTable.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int selectedData = 0;

                int[] selectedRow = titleTable.getSelectedRows();
                int[] selectedColumns = titleTable.getSelectedColumns();

                for (int i = 0; i < selectedRow.length; i++) {
                  for (int j = 0; j < selectedColumns.length; j++) {
                    selectedData = (Integer) titleTable.getValueAt(selectedRow[i], 0);
                  }
                }

                selectedID = selectedData;
            }
        });
        //hide the id column
        titleTable.getColumnModel().getColumn(0).setMinWidth(0);
        titleTable.getColumnModel().getColumn(0).setMaxWidth(0);

        //jScrollPane1.setViewportView(titleTable);
        
        /**
         * Right Click menu option
         */
        
        JMenuItem finishMenuItem = new JMenuItem("Finish Task");
        finishMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                markAsFinished();
            }   
        });
        tablePopupMenu.add(finishMenuItem);
        
        
        JMenuItem editMenuItem = new JMenuItem("Edit");
        editMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                openInternalFrame();
            }   
        });
        tablePopupMenu.add(editMenuItem);
        
        
        JMenuItem deleteMenuItem = new JMenuItem("Delete");
        deleteMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                deleteItem();
            }   
        });
        tablePopupMenu.add(deleteMenuItem);
        //set mouse listener
        titleTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
              if (evt.isPopupTrigger()) {
                tablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
              }
            }

            public void mouseReleased(MouseEvent evt) {
              if (evt.isPopupTrigger()) {
                tablePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
              }
            }
          });
    }
    
    @Override
    public void markAsFinished(){
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure to mark as done?", "Warning", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            ToDoItemModel currentItem;
            DerbyDB db = new DerbyDB();
            currentItem = db.findItemInDB(selectedID);
            currentItem.setiCategory(99);

            if(db.updateItemInDB(selectedID, currentItem)){
                JOptionPane.showMessageDialog (null, "Whoops something went wrong, please try again!", "Result message", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog (null, "Succesfully deleted!", "Result message", JOptionPane.INFORMATION_MESSAGE);
                initMyComponents();
            }
            db.closeConnection();
        }
    }  
     
    @Override
    public void openInternalFrame(){
        // JInternalFrame internalFrame = new JInternalFrame();
         //internalFrame.setContentPane(mainFrame.desktopPane);
         AddEditItem addItem = new AddEditItem(selectedID);
         desktopPane.add(addItem);
         addItem.setVisible(true);

         this.dispose();
    }

    @Override
    public void deleteItem(){
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure to delete?", "Warning", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            DerbyDB db = new DerbyDB();
            if(db.deleteItemInDB(selectedID, "items")){
                JOptionPane.showMessageDialog (null, "Whoops something went wrong, please try again!", "Result message", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog (null, "Succesfully deleted!", "Result message", JOptionPane.INFORMATION_MESSAGE);
                initMyComponents();
            }
            db.closeConnection();
        }
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuItemActionPerformed
        TaskImport ti = new TaskImport();
        if(ti.doImport()){
            CategoryTableView ctv = new CategoryTableView();
            desktopPane.add(ctv);
            ctv.setVisible(true);
        }
    }//GEN-LAST:event_importMenuItemActionPerformed

    private void addItemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemMenuItemActionPerformed
        AddEditItem addItem = new AddEditItem();
        desktopPane.add(addItem);
        addItem.setVisible(true);
    }//GEN-LAST:event_addItemMenuItemActionPerformed

    private void importantMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importantMenuBtnActionPerformed
        CategoryTableView ctv = new CategoryTableView(1);
        desktopPane.add(ctv);
        ctv.setVisible(true);
    }//GEN-LAST:event_importantMenuBtnActionPerformed

    private void allTasksMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTasksMenuBtnActionPerformed
        CategoryTableView ctv = new CategoryTableView();
        desktopPane.add(ctv);
        ctv.setVisible(true);
    }//GEN-LAST:event_allTasksMenuBtnActionPerformed

    private void importantNotSoonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importantNotSoonMenuItemActionPerformed
        CategoryTableView ctv = new CategoryTableView(2);
        desktopPane.add(ctv);
        ctv.setVisible(true);
    }//GEN-LAST:event_importantNotSoonMenuItemActionPerformed

    private void notImpSoonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notImpSoonMenuItemActionPerformed
        CategoryTableView ctv = new CategoryTableView(3);
        desktopPane.add(ctv);
        ctv.setVisible(true);
    }//GEN-LAST:event_notImpSoonMenuItemActionPerformed

    private void notImpNotSoonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notImpNotSoonMenuItemActionPerformed
        CategoryTableView ctv = new CategoryTableView(4);
        desktopPane.add(ctv);
        ctv.setVisible(true);
    }//GEN-LAST:event_notImpNotSoonMenuItemActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed
        BigDump dump = new BigDump();
        dump.export();
    }//GEN-LAST:event_exportMenuItemActionPerformed

    private void finishedTaskMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedTaskMenuItemActionPerformed
        CategoryTableView ctv = new CategoryTableView(99);
        desktopPane.add(ctv);
        ctv.setVisible(true);
    }//GEN-LAST:event_finishedTaskMenuItemActionPerformed

    private void compactViewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compactViewMenuItemActionPerformed
        setVisible(false);
        CompactView cp = new CompactView(this);
        cp.setVisible(true);
    }//GEN-LAST:event_compactViewMenuItemActionPerformed

    private void syncMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncMenuItemActionPerformed
        if(SyncData.upSync(false)){
            JOptionPane.showMessageDialog (null, "Syncronized sucessfully!", "Syncronizing", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("Synced sucessfully");
        }else
            System.out.println("Something went wrong");
    }//GEN-LAST:event_syncMenuItemActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
       /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RegistrationForm dialog = new RegistrationForm(new javax.swing.JFrame(), true, currentUserModel);
                
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_settingsMenuItemActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem addItemMenuItem;
    private javax.swing.JMenuItem allTasksMenuBtn;
    private javax.swing.JMenuItem compactViewMenuItem;
    public javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenuItem finishedTaskMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JMenuItem importantMenuBtn;
    private javax.swing.JMenuItem importantNotSoonMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem notImpNotSoonMenuItem;
    private javax.swing.JMenuItem notImpSoonMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JMenuItem syncMenuItem;
    // End of variables declaration//GEN-END:variables

}
